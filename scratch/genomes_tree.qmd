#Tree of eupercaria with available genomes

##Eric Witte

#Install packages
install.packages("fishtree")
install.packages("tidyverse")
install.packages("phytools")
install.packages("ape")
install.packages("webdriver")
install.packages("magrittr")
install.packages("dplyr")
install.packages("rvest")
install.packages("xml2")
install.packages("selectr")
install.packages("tibble")
install.packages("purrr")
install.packages("httr")
install.packages("ggplot2")
install.packages("BiocManager")
BiocManager::install("ggtree")

#Load packages
library(fishtree)
library(tidyverse)
library(phytools)
library(ape)
library(webdriver)
library(magrittr)
library(dplyr)
library(rvest)
library(xml2)
library(selectr)
library(tibble)
library(purrr)
library(httr)
library(ggplot2)
library(ggtree)

install_phantomjs()

#Full tree
euperc_all <- fishtree_phylogeny(rank = "Eupercaria", type = "chronogram_mrca")
euperc_all_list <- euperc_all$tip.label
euperc_df <- as.data.frame(euperc_all_list)
euperc_df[,1] <- sub("_", "-", euperc_df[,1])
colnames(euperc_df)[1] <- ("Species")
view(euperc_df)

#Load available genome data (NCBI genome browser, filter: fishes) #pre-filter manually to remove duplicates and keep just highest quality and remove mitochondrion
all_genomes <- read.csv(file = "data/fish_genomes_1_24.csv", header = TRUE)
all_genomes[,1] <- sub(" ", "-", all_genomes[,1])
colnames(all_genomes)[1]<- ("Species")
View(all_genomes)

#subset to find matches
euperc_genomes <- all_genomes %>% inner_join(euperc_df, by = "Species")
View(euperc_genomes)

to_use <- unique(euperc_genomes$Species)
to_use_ <- sub("-", "_", to_use)
pruned_tree <- keep.tip(euperc_all, to_use_)
plot(pruned_tree)

to_use_df <- as.data.frame(to_use)
colnames(to_use_df[1]) <- "Species"

#map venom statuses to tree
base_url <- "https://www.fishbase.se/summary/" #locate fishbase

sample_data <- data.frame()

for (Species in to_use_df){
     tmp_link <- paste(base_url, Species, ".html", sep = "") #create URL
     tmp_entry <- cbind(Species, tmp_link)
     sample_data <- rbind(sample_data, tmp_entry)
     rm(list = ls(pattern = "tmp_"))
}

sample_data <- sample_data %>% dplyr::rename("link" = "tmp_link") # collect names & links

all_links <- sample_data$link #create link vector
all_names <- sample_data$name #create name vector

pjs_instance <- run_phantomjs()
pjs_session <- Session$new(port = pjs_instance$port)

Genome_fish_data <- data.frame()
for (i in 1:length(all_links)) {
  cat("Downloading", i, "of", length(all_links), "URL:", all_links[i], "\n")
  article <- scrape_fish_base(all_links[i])
  Genome_fish_data <- rbind(Genome_fish_data, article)
} ###NOTE: this pulls extra data. In particular, model will have large chunks of text. Modify scrape_fishbase function as necessary.


Genome_fish_data_2 <- Genome_fish_data %>%  mutate(venom_stat = venom_stat(threat_to_humans), .before = threat_to_humans) # Add column that evaluates venom stat
view(Genome_fish_data_2) #check that all entries returned entries on fishbase

v_stat<-Genome_fish_data_2$venom_stat
for(i in 1:length(v_stat)){ifelse(v_stat[i] == "venomous", v_stat[i] <- 1, v_stat[i] <- 0)}
v_stat<- as.numeric(v_stat)
names(v_stat) <- sort(pruned_tree$tip.label)

Genome_cont <- contMap(pruned_tree, v_stat, plot = FALSE)
Genome_map <-setMap(Genome_cont, invert = TRUE)

plot(Genome_map)

